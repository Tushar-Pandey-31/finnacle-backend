generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  emailVerified          Boolean?  @default(false)
  emailVerificationToken String?   @unique
  emailVerificationExpires DateTime?
  passwordResetToken     String?   @unique
  passwordResetExpires   DateTime?
  portfolios Portfolio[]
  watchlistItems UserWatchlist[]
  walletBalanceCents     Int       @default(0)
  initialWalletGrantedAt DateTime?
  realizedPnlCents       Int       @default(0)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  dailyQuizAssignments   DailyQuizAssignment[]
  moneyTransactions      MoneyTransaction[]

  @@index([walletBalanceCents(sort: Desc)], name: "idx_user_wallet_balance")
}

model Portfolio {
  id        Int      @id @default(autoincrement())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  holdings  Holding[]
}

model Holding {
  id           Int      @id @default(autoincrement())
  symbol       String
  quantity     Float
  portfolio    Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId  Int
  avgPriceCents Int     @default(0)
}

model UserWatchlist {
  id          Int    @id @default(autoincrement())
  user        User   @relation(fields: [userId], references: [id])
  userId      Int
  marketType  String
  symbol      String

  @@unique([userId, marketType, symbol])
  @@map("user_watchlist")
}

/// Quiz questions master table
model QuizQuestion {
  id                 Int       @id @default(autoincrement())
  prompt             String
  options            String[]
  correctOptionIndex Int
  category           String?
  difficulty         String?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

/// Daily assignment per user, stores selected question ids and attempts as JSON
model DailyQuizAssignment {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  dateUTC        DateTime  @db.Date
  questionIds    Int[]
  attempts       Json?
  correctCount   Int       @default(0)
  attemptedCount Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([userId, dateUTC])
}

enum MoneyTransactionReason {
  INITIAL_GRANT
  QUIZ_CORRECT_ANSWER
}

/// Audit trail for wallet changes
model MoneyTransaction {
  id           Int                      @id @default(autoincrement())
  user         User                     @relation(fields: [userId], references: [id])
  userId       Int
  amountCents  Int
  reason       MoneyTransactionReason
  relatedId    String?
  createdAt    DateTime                 @default(now())

  @@index([userId])
  @@unique([userId, reason, relatedId])
}